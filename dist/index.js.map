{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar ln = require( '@stdlib/math-base-special-ln' );\n\n\n// MAIN //\n\n/**\n* Returns the differential entropy of a Bradford distribution.\n*\n* @param {PositiveNumber} c - shape parameter\n* @returns {number} differential entropy\n*\n* @example\n* var v = entropy( 0.2 );\n* // returns ~-0.001\n*\n* @example\n* var v = entropy( 0.5 );\n* // returns ~-0.007\n*\n* @example\n* var v = entropy( 10.0 );\n* // returns ~-0.229\n*\n* @example\n* var v = entropy( 0.0 );\n* // returns NaN\n*\n* @example\n* var v = entropy( -1.0 );\n* // returns NaN\n*\n* @example\n* var v = entropy( NaN );\n* // returns NaN\n*/\nfunction entropy( c ) {\n\tvar k;\n\tif ( isnan( c ) || c <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tk = ln( 1.0 + c );\n\treturn ( k/2.0 ) - ln( c/k );\n}\n\n\n// EXPORTS //\n\nmodule.exports = entropy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Bradford distribution differential entropy.\n*\n* @module @stdlib/stats-base-dists-bradford-entropy\n*\n* @example\n* var entropy = require( '@stdlib/stats-base-dists-bradford-entropy' );\n*\n* var v = entropy( 0.2 );\n* // returns ~-0.001\n*\n* v = entropy( 0.5 );\n* // returns ~-0.007\n*/\n\n// MODULES //\n\nvar entropy = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = entropy;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAK,QAAS,8BAA+B,EAmCjD,SAASC,EAASC,EAAI,CACrB,IAAIC,EACJ,OAAKJ,EAAOG,CAAE,GAAKA,GAAK,EAChB,KAERC,EAAIH,EAAI,EAAME,CAAE,EACPC,EAAE,EAAQH,EAAIE,EAAEC,CAAE,EAC5B,CAKAL,EAAO,QAAUG,ICjCjB,IAAIG,EAAU,IAKd,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isnan", "ln", "entropy", "c", "k", "entropy"]
}
